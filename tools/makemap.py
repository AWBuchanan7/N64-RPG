import os
import csv

width = 0
height = 0
bg_map = []
fg_map = []
npc_map = []

def get_map_text(map):
    map_text = "    "
    for y in range(0, height):
        if y > len(map) - 1:
            map_text += "-1, " * width
        else:
            for x in range(0, width):
                if x > len(map[y]) - 1:
                    map_text += "-1, "
                else:
                    map_text += f"{map[y][x]}, "
        map_text += "\n    "
    return map_text

# Parse the background map where every row is the X coordinate and every column is the Y coordinate
with open('map/overworld._background.csv', 'r') as f:
    reader = csv.reader(f)
    data = list(reader)
    width = len(data[0]) # This is the definitive width of the map
    height = len(data) # This is the definitive height of the map
    bg_map = data

# Parse the foreground map where every row is the X coordinate and every column is the Y coordinate
with open('map/overworld._foreground.csv', 'r') as f:
    reader = csv.reader(f)
    data = list(reader)
    fg_map = data

map_c_header_name = "overworld"
map_c_header = f"""
/**
 * @file {map_c_header_name}_map.h
 * DO NOT EDIT THIS FILE. PLEASE SEE THE README ON HOW TO EDIT THE MAP
 * THIS IS A GENERATED FILE
 */
#ifndef __{map_c_header_name.upper()}_MAP_H
#define __{map_c_header_name.upper()}_MAP_H

#include <libdragon.h>
#include <math.h>
#include "../utils.h"
#include "../Actor/npc.h"
#include "map.h"

npc_t {map_c_header_name}Npc1;

const int {map_c_header_name}_map_width = {width};
const int {map_c_header_name}_map_height = {height};
const int {map_c_header_name}_bg_map[{width * height}] = {{
{get_map_text(bg_map)}
}}; // All default to 0 / GRASS
const int {map_c_header_name}_fg_map[{width * height}] = {{
{get_map_text(fg_map)}
}}; // All default to 0
npc_t *{map_c_header_name}_npcs[32] = {{
    &{map_c_header_name}Npc1,
}};
const uint8_t {map_c_header_name}_npcs_length = 1;

map_t {map_c_header_name}_map = {{
    {map_c_header_name}_map_width,
    {map_c_header_name}_map_height,
    {map_c_header_name}_bg_map,
    {map_c_header_name}_fg_map,
    {map_c_header_name}_npcs,
    {map_c_header_name}_npcs_length,
}};

#endif /* __{map_c_header_name.upper()}_MAP_H */
"""

with open(f"src/Maps/{map_c_header_name}_map.h", "w") as f:
    f.write(map_c_header)